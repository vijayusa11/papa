I apologize for the oversight. Let's correct the syntax error. Here's the updated section of the stored procedure to handle `@employeeIds` as a comma-separated list:

First, define a function to split the comma-separated string into a table, which can be reused:
```sql
CREATE FUNCTION dbo.SplitString
(
    @Input NVARCHAR(MAX),
    @Delimiter CHAR(1)
)
RETURNS @Output TABLE (Item NVARCHAR(MAX))
AS
BEGIN
    DECLARE @Start INT, @End INT
    SELECT @Start = 1, @End = CHARINDEX(@Delimiter, @Input)
    WHILE @Start < LEN(@Input) + 1 BEGIN
        IF @End = 0 
            SET @End = LEN(@Input) + 1
        INSERT INTO @Output (Item) VALUES(SUBSTRING(@Input, @Start, @End - @Start))
        SET @Start = @End + 1
        SET @End = CHARINDEX(@Delimiter, @Input, @Start)
    END
    RETURN
END
```

Then, modify your stored procedure to use this function:

Replace:
```sql
if @employeeIds <>''
begin
    set @Select = @Select + ' and E.EmployeeId like ''%'+ convert(varchar,@employeeIds) + '''
end
```

With:
```sql
if @employeeIds <> ''
begin
    set @Select = @Select + ' and E.EmployeeId IN (SELECT Item FROM dbo.SplitString(@employeeIds, '',''))'
end
```

And for the counting logic, replace:
```sql
if @employeeIds <>''
begin
    set @SQLString = @SQLString + ' and E.EmployeeId like ''%'+ convert(varchar,@employeeIds) + '''
end
```

With:
```sql
if @employeeIds <> ''
begin
    set @SQLString = @SQLString + ' and E.EmployeeId IN (SELECT Item FROM dbo.SplitString(@employeeIds, '',''))'
end
```

This will allow the stored procedure to handle `@employeeIds` as a comma-separated list.