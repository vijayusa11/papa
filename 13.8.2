No, it's not necessary to write every column name in the method signature. If your goal is to make the method more flexible and avoid having to specify every column individually, you can pass the parameters as a dictionary or a custom object. This approach will allow you to dynamically handle the parameters and reduce the complexity of the method signature.

### Alternative Method Using a Dictionary

Here’s how you could implement the method using a `Dictionary<string, object>` to pass the parameters:

```csharp
public DataSet ExportEmployeeListWithBankExport(
    Dictionary<string, object> parameters,
    string whereCondition)
{
    DataSet ds = new DataSet();

    using (CPSIntranetEntities context = new CPSIntranetEntities())
    {
        var sqlParams = parameters.Select(param =>
            new SqlParameter($"@{param.Key}", param.Value ?? DBNull.Value)).ToArray();

        ds = Common.Common.DataTable(
            context,
            "EXEC spGetEmployeeListWithBankExport " +
            "@OrderBy, @EmployeeCode, @EmployeeName, @Designation, @DepartmentName, " +
            "@EmailAddress, @Username, @EmployeeGroupName, @Status, @ComplianceStatus, " +
            "@IsDelete, @employeeIds, @ViewerId, @ColumnNames, @WhereCondition",
            sqlParams
        );
    }

    return ds;
}
```

### Usage Example:
```csharp
var parameters = new Dictionary<string, object>
{
    { "OrderBy", "EmployeeCode ASC" },
    { "EmployeeCode", "E12345" },
    { "EmployeeName", "John Doe" },
    { "Designation", "Manager" },
    { "DepartmentName", "HR" },
    { "EmailAddress", "johndoe@example.com" },
    { "Username", "jdoe" },
    { "EmployeeGroupName", "Admin Group" },
    { "Status", "Active" },
    { "ComplianceStatus", "Compliant" },
    { "IsDelete", "0" },
    { "employeeIds", "1,2,3" },
    { "ViewerId", 123 },
    { "ColumnNames", "EmployeeCode,ContractorCode" }
};

var result = ExportEmployeeListWithBankExport(parameters, "AND E.StatusName = 'Active'");
```

### Advantages:
1. **Flexibility:** You don’t need to modify the method signature every time a new parameter is added or removed from the stored procedure.
2. **Scalability:** This approach is scalable because it can handle a varying number of parameters.

### Custom Object Approach
Alternatively, you can create a custom class that encapsulates all the stored procedure parameters and pass an instance of this class to the method.

#### Example Custom Object:
```csharp
public class ExportEmployeeParams
{
    public string OrderBy { get; set; }
    public string EmployeeCode { get; set; }
    public string EmployeeName { get; set; }
    public string Designation { get; set; }
    public string DepartmentName { get; set; }
    public string EmailAddress { get; set; }
    public string Username { get; set; }
    public string EmployeeGroupName { get; set; }
    public string Status { get; set; }
    public string ComplianceStatus { get; set; }
    public string IsDelete { get; set; }
    public string EmployeeIds { get; set; }
    public int? ViewerId { get; set; }
    public string ColumnNames { get; set; }
}

public DataSet ExportEmployeeListWithBankExport(
    ExportEmployeeParams exportParams, 
    string whereCondition)
{
    DataSet ds = new DataSet();

    using (CPSIntranetEntities context = new CPSIntranetEntities())
    {
        ds = Common.Common.DataTable(
            context,
            "EXEC spGetEmployeeListWithBankExport @OrderBy, @EmployeeCode, @EmployeeName, @Designation, @DepartmentName, @EmailAddress, @Username, @EmployeeGroupName, @Status, @ComplianceStatus, @IsDelete, @employeeIds, @ViewerId, @ColumnNames, @WhereCondition",
            new SqlParameter("OrderBy", SqlDbType.VarChar, 1000) { Value = exportParams.OrderBy ?? (object)DBNull.Value },
            new SqlParameter("EmployeeCode", SqlDbType.NVarChar, 20) { Value = exportParams.EmployeeCode ?? (object)DBNull.Value },
            // Continue for all parameters...
        );
    }

    return ds;
}
```

### Usage Example:
```csharp
var exportParams = new ExportEmployeeParams
{
    OrderBy = "EmployeeCode ASC",
    EmployeeCode = "E12345",
    EmployeeName = "John Doe",
    Designation = "Manager",
    DepartmentName = "HR",
    // ... other parameters
};

var result = ExportEmployeeListWithBankExport(exportParams, "AND E.StatusName = 'Active'");
```

### Summary:
- **Dictionary Approach:** Allows for dynamic and flexible parameter handling.
- **Custom Object Approach:** Provides a structured way to pass parameters and makes the code more readable. 

Both approaches help to reduce the complexity of the method signature while maintaining the ability to pass all necessary parameters to the stored procedure.