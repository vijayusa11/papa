Do not want to check duplicate values insertion in databsae like checkExistenceQuery this method so allow duplicate values.

private void InsertIntoDatabase(string excelFilePath, string sheetName)
{
    if (string.IsNullOrEmpty(sheetName))
    {
        LogToErrorFile("Sheet name is null or empty.");
        return;
    }

    try
    {
        using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
        {
            connection.Open();

            string insertQuery = @"INSERT INTO OutputFileDetails (Date, Agent, TimesheetOwner, TotalTalkingTime)
                           VALUES (@Date, @Agent, @TimesheetOwner, @TotalTalkingTime)";

            string checkExistenceQuery = @"SELECT COUNT(*) FROM OutputFileDetails
                                   WHERE Date = @Date AND Agent = @Agent AND TimesheetOwner = @TimesheetOwner AND TotalTalkingTime = @TotalTalkingTime";

            using (SqlCommand insertCommand = new SqlCommand(insertQuery, connection))
            using (SqlCommand checkCommand = new SqlCommand(checkExistenceQuery, connection))
            {
                using (var workbook = new XSSFWorkbook(File.Open(excelFilePath, FileMode.Open, FileAccess.Read)))
                {
                    ISheet sheet = workbook.GetSheet(sheetName);

                    if (sheet == null)
                    {
                        LogToErrorFile($"Sheet '{sheetName}' not found in workbook.");
                        return;
                    }

                    for (int i = 1; i <= sheet.LastRowNum; i++)
                    {
                        var row = sheet.GetRow(i);
                        if (row == null)
                        {
                            LogToErrorFile($"Row {i} is null.");
                            continue;
                        }

                        DateTime date = (DateTime)row.GetCell(0).DateCellValue;
                        string agent = row.GetCell(1).StringCellValue;
                        string timesheetOwner = row.GetCell(2).StringCellValue;
                        string totalTalkingTime = row.GetCell(3).StringCellValue;

                        checkCommand.Parameters.Clear();
                        checkCommand.Parameters.AddWithValue("@Date", date);
                        checkCommand.Parameters.AddWithValue("@Agent", agent);
                        checkCommand.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                        checkCommand.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);

                        int rowCount = (int)checkCommand.ExecuteScalar();

                        if (rowCount == 0)
                        {
                            insertCommand.Parameters.Clear();
                            insertCommand.Parameters.AddWithValue("@Date", date);
                            insertCommand.Parameters.AddWithValue("@Agent", agent);
                            insertCommand.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                            insertCommand.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);

                            insertCommand.ExecuteNonQuery();
                        }
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}
