To exclude the `id` column from being written to the CSV file, you can modify the `WriteHeader` and `WriteRows` methods to filter out the `id` column.

Here's the updated code:

```csharp
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;

public class YourClassName
{
    public void OverwriteCsvWithDataFromDatabase(string csvFilePath)
    {
        try
        {
            // Fetch data from the database
            var data = FetchDataFromDatabase();

            // Append data to the CSV file
            WriteDataToCsv(csvFilePath, data);
        }
        catch (Exception ex)
        {
            LogToErrorFile(ex.Message);
            StartConsoleWriting(ex.Message);
            throw;
        }
    }

    private DataTable FetchDataFromDatabase()
    {
        var dataTable = new DataTable();

        using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
        {
            connection.Open();
            string query = "SELECT * FROM OutputFileDetails";

            using (var command = new SqlCommand(query, connection))
            {
                using (var adapter = new SqlDataAdapter(command))
                {
                    adapter.Fill(dataTable);
                }
            }
        }

        return dataTable;
    }

    private void WriteDataToCsv(string csvFilePath, DataTable data)
    {
        using (var writer = new StreamWriter(csvFilePath, false, Encoding.UTF8))
        {
            // Write header
            WriteHeader(writer, data.Columns);

            // Write rows
            WriteRows(writer, data);
        }
    }

    private void WriteHeader(StreamWriter writer, DataColumnCollection columns)
    {
        var header = string.Join(",", columns.Cast<DataColumn>().Where(column => column.ColumnName != "id").Select(column => column.ColumnName));
        writer.WriteLine(header);
    }

    private void WriteRows(StreamWriter writer, DataTable data)
    {
        foreach (DataRow row in data.Rows)
        {
            var rowValues = row.ItemArray
                .Where((field, index) => data.Columns[index].ColumnName != "id")
                .Select(field =>
                {
                    if (field is DateTime dateTime)
                    {
                        return dateTime.ToString("dd-MM-yyyy");
                    }
                    return field.ToString();
                });

            var rowString = string.Join(",", rowValues);
            writer.WriteLine(rowString);
        }
    }

    private void LogToErrorFile(string message)
    {
        // Implement your logging logic here
    }

    private void StartConsoleWriting(string message)
    {
        // Implement your console writing logic here
    }
}
```

Changes made:

1. The `WriteHeader` method now excludes the `id` column by using `Where(column => column.ColumnName != "id")` before selecting the column names.
2. The `WriteRows` method filters out the `id` column values by using `Where((field, index) => data.Columns[index].ColumnName != "id")` before converting the field values to strings.

This ensures that the `id` column is not included in the output CSV file.