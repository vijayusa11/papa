To avoid exporting duplicate rows based on `EmployeeName`, `ProjectName`, `PracticeName`, and `CreatedDate`, you can use a HashSet to keep track of these combinations. Only export a row if its combination of these fields is unique. Here’s how you can modify your code:

1. Create a `HashSet` to store unique combinations.
2. Before exporting each row, check if its combination already exists in the `HashSet`.
3. If it doesn’t exist, add it to the `HashSet` and export the row.

Here's the modified code:

```csharp
if (oList != null)
{
    var uniqueEntries = new HashSet<string>();
    
    foreach (var oEntity in oList)
    {
        strData = string.Empty;
        strData += Common.GetExportString("") + ",";
        strData += Common.GetExportString(oEntity.TimesheetDate.ToString("dd/MM/yyyy")) + ",";
        strData += Common.GetExportString(oEntity.EmployeeName) + ",";
        strData += Common.GetExportString(oEntity.ProjectName) + ",";
        strData += Common.GetExportString(oEntity.PracticeName) + ",";
        strData += Common.GetExportString(oEntity.CreatedDate.ToString()) + ",";

        string uniqueKey = $"{oEntity.EmployeeName}-{oEntity.ProjectName}-{oEntity.PracticeName}-{oEntity.CreatedDate}";

        // Skip if this combination already exists
        if (!uniqueEntries.Add(uniqueKey))
        {
            continue;
        }

        // Vijay 14
        if (Convert.ToInt32(TimesheetStatusId) != (int)EnumTimesheetStatuses.DraftNotSubmitted)
        {
            strData += Common.GetExportString(Convert.ToString(oEntity.SubmittedDate)) + ",";
            strData += Common.GetExportString(oEntity.TotalHours.ToString()) + ",";
        }
        strData += Common.GetExportString(oEntity.Rate.ToString()) + ",";

        if (Convert.ToInt32(TimesheetStatusId) != (int)EnumTimesheetStatuses.DraftNotSubmitted)
        {
            strData += Common.GetExportString(oEntity.TotalRate.ToString()) + ",";
        }
        if (Convert.ToInt32(TimesheetStatusId) == Convert.ToInt32(CPSIntranet.Model.EnumTimesheetStatuses.Invoiced))
        {
            strData += Common.GetExportString(oEntity.ProjectCode.ToString()) + ",";
            strData += Common.GetExportString(oEntity.ProjectCategory.ToString()) + ",";
            strData += Common.GetExportString(oEntity.ContractorCode.ToString()) + ",";

            if (oEntity.ClinicianTypeId > 0 || oEntity.ClinicianTypeId != null)
            {
                string ClinicianType = string.Empty;

                ClinicianType = getClinicianType(oEntity.ClinicianTypeId);
                strData += Common.GetExportString(ClinicianType) + ",";
            }
            else
            {
                strData += Common.GetExportString("") + ",";
            }

            strData += Common.GetExportString(oEntity.Typeofclient.ToString()) + ",";
        }

        if (Convert.ToInt32(TimesheetStatusId) == (int)EnumTimesheetStatuses.All)
        {
            strData += Common.GetExportString(oEntity.Status.ToString()) + ",";
        }
        if (Convert.ToInt32(TimesheetStatusId) == (int)EnumTimesheetStatuses.Authorised)
        {
            strData += Common.GetExportString(oEntity.AuthoriserName.ToString()) + ",";
            strData += Common.GetExportString(oEntity.AuthorisedDate.Value.ToString("dd/MM/yyyy hh:mm tt")) + ",";
        }

        sw.Write(strData.Substring(0, strData.Length - 1));
        sw.Write(sw.NewLine);
    }
    sw.Close();
    strreturn = Path.GetFileName(strExportPath.Trim());
}
```

In this code:

1. A `HashSet` named `uniqueEntries` is created to store unique combinations of `EmployeeName`, `ProjectName`, `PracticeName`, and `CreatedDate`.
2. For each entity in `oList`, a unique key is generated by concatenating these fields.
3. The `HashSet.Add` method is used to add the key to the set. If the key already exists, the `Add` method returns `false`, and the loop continues to the next entity, skipping the export of the current row.
4. Only unique rows are written to the output file.

This approach ensures that only unique rows are exported based on the specified fields.